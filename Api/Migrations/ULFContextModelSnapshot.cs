// <auto-generated />
using Data.Contexts;
using Data.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Api.Migrations
{
    [DbContext(typeof(ULFContext))]
    partial class ULFContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Entities.Accrual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AgreementId");

                    b.Property<double>("Amount");

                    b.Property<int>("Currency");

                    b.Property<DateTime>("Date");

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.ToTable("Accruals");
                });

            modelBuilder.Entity("Data.Entities.Agreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<string>("Code");

                    b.Property<int>("Currency");

                    b.Property<DateTime>("Date");

                    b.Property<double>("ParticipationAmount");

                    b.Property<DateTime>("ShippmentDate");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Agreements");
                });

            modelBuilder.Entity("Data.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Data.Entities.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClientId");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("ResultId");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ResultId");

                    b.HasIndex("TypeId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Data.Entities.TaskResultsGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<int>("TaskTypeId");

                    b.HasKey("Id");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("TaskResultsGroups");
                });

            modelBuilder.Entity("Data.Entities.TaskResultsItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<int>("ResultsGroupId");

                    b.HasKey("Id");

                    b.HasIndex("ResultsGroupId");

                    b.ToTable("TaskResultsItems");
                });

            modelBuilder.Entity("Data.Entities.TaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("Data.Entities.Accrual", b =>
                {
                    b.HasOne("Data.Entities.Agreement", "Agreement")
                        .WithMany("Accruals")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.Agreement", b =>
                {
                    b.HasOne("Data.Entities.Client", "Client")
                        .WithMany("Agreements")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.Task", b =>
                {
                    b.HasOne("Data.Entities.Client", "Client")
                        .WithMany("Tasks")
                        .HasForeignKey("ClientId");

                    b.HasOne("Data.Entities.TaskResultsItem", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");

                    b.HasOne("Data.Entities.TaskType", "Type")
                        .WithMany("Tasks")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.TaskResultsGroup", b =>
                {
                    b.HasOne("Data.Entities.TaskType", "TaskType")
                        .WithMany("ResultsGroups")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.TaskResultsItem", b =>
                {
                    b.HasOne("Data.Entities.TaskResultsGroup", "ResultsGroup")
                        .WithMany("Items")
                        .HasForeignKey("ResultsGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
